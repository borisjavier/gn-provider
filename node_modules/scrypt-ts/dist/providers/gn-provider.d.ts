import * as scryptlib from 'scryptlib';
import { Provider, TransactionResponse, TxHash, UtxoQueryOptions } from 'scrypt-ts/dist/bsv/abstract-provider';
import { AddressOption, UTXO } from 'scrypt-ts/dist/bsv/types';
declare enum ProviderEvent {
    Connected = "connected",
    NetworkChange = "networkChange"
}
export declare class GNProvider extends Provider {
    emit: (event: ProviderEvent, ...args: any[]) => boolean;
    private _network;
    private _isConnected;
    private _apiKey;
    constructor(network: scryptlib.bsv.Networks.Network, apiKey?: string);
    protected _initializeConnection(): void;
    get apiPrefix(): string;
    isConnected(): boolean;
    connect(): Promise<this>;
    private _getHeaders;
    updateNetwork(network: scryptlib.bsv.Networks.Network): void;
    getNetwork(): scryptlib.bsv.Networks.Network;
    protected _ready(): Promise<void>;
    sendRawTransaction(rawTxHex: string): Promise<TxHash>;
    listUnspent(address: AddressOption, options?: UtxoQueryOptions): Promise<UTXO[]>;
    getBalance(address: AddressOption): Promise<{
        confirmed: number;
        unconfirmed: number;
    }>;
    getTransaction(txHash: string): Promise<TransactionResponse>;
    getFeePerKb(): Promise<number>;
    private needIgnoreError;
    private friendlyBIP22RejectionMsg;
}
export {};
